#!/bin/bash

# For better usage of this file, it can be added to PATH or directly moved to /bin folder.
# Also, the command to run this file can be added to Sublime Build file, as a variant.

# Usage:
# 	./stress-test <file.cpp> normal <no_of_testcases>: Testing normal problems
# 	./stress-test <file.cpp> custom <no_of_testcases>: Testing the solutions for which custom tester is required
# 	./stress-test <file.cpp> interactive <no_of_testcases>: Testing the interactive problems


# 	For this example, suppose that the file passed as the first argument is 1.cpp

# Normal Testing:

# 	Three files are required:
# 	(I) 1.cpp: Main solution file.
# 	(II) 1__Good.cpp: The correct solution file, or the Brute force solution.
# 	(III) 1__Generator.cpp: The file to generate the test cases. This file outputs a random test
# 							case to the standard output stream (cout).

# 	All the object codes of the cpp files will be created in ./tempfiles.
# 	Test case of the last execution will be stored in 1__Testcase.txt
# 	The output produced by the main solution will be stored in 1__Output_Main.txt
# 	The output produced by the correct solution will be stored in 1__Output_Good.txt
# 	The final verdict will be stored in 1__Verdict.txt

# Custom Testing:

# 	Three files are required:
# 	(I) 1.cpp: Main solution file.
# 	(II) 1__Checker.cpp: This file takes the testcase produced by generator and then the answer produced
# 						 by the main solution file. It then validates the answer, outputs endl alongwith
# 						 any verdict produced by the judge as standard error stream (stderr). Finally,
# 						 it returns 1 if error occured, or returns 0 in case of success.
# 	(III) 1__Generator.cpp: The file to generate the test cases. This file outputs a random test
# 							case to the standard output stream (cout).

# 	All the object codes of the cpp files will be created in ./tempfiles.
# 	Test case of the last execution will be stored in 1__Testcase.txt
# 	The output produced by the main solution will be stored in 1__Output_Main.txt
# 	The combination of testcase and output produced will be stored in 1__Combined.txt
# 	The final verdict will be stored in 1__Verdict.txt

# Interactive Problems Testing:

# 	Two files are required:
# 	(I) 1.cpp: Main solution file.
# 	(II) 1__Interactor.cpp: (It acts as both generator and interactor)
# 		This file creates a random test case, probably the answer chosen by the judge
# 		(similar to generator) and then inside an infinite while loop, it takes the output
# 		produced by the main solution as standard input stream (cin) and outputs the response
# 		as standard output stream (cout). Simultaneously, for every cin and cout, it sends
# 		those results to cerr too, for printing the testcase (in case an error occured).
# 		It validates the input, checking whether the number of questions asked is under limit
# 		and whether the answer is correct or not, and in case of any error, it outputs the
# 		verdict as standard error stream (cerr), simultaneously returns 1. Otherwise, it
# 		returns 0. Also, it outputs the correct answer to standard error stream (cerr).

# 	All the object codes of the cpp files will be created in ./tempfiles.
# 	Test case of the last interaction will be stored in 1__Testcase.txt
# 	The final verdict will be stored in 1__Verdict.txt


regex='^[0-9]+$'

if [[ $# -eq 3 ]] && [[ $1 == *.cpp ]] && ([[ $2 == "normal" ]] || [[ $2 == "custom" ]] || [[ $2 == "interactive" ]]) && [[ $3 =~ $regex ]]; then # If one argument is passed, and it is a cpp file

	TESTING_TYPE=$2
	NO_OF_TESTCASES=$3

	full_filename=$(basename -- "$1")
	extension="${full_filename##*.}"
	filename="${full_filename%.*}"

	DIR="$( cd "$( dirname "$1" )" && pwd )"
	TEMPFILES_DIR="${DIR}/tempfiles"

	MAIN_FILE="${DIR}/${filename}.$extension"
	MAIN_FILE_EXEC="${TEMPFILES_DIR}/${filename}"

	GOOD_FILE="${DIR}/${filename}__Good.$extension"
	GOOD_FILE_EXEC="${TEMPFILES_DIR}/${filename}__Good"

	GENERATOR="${DIR}/${filename}__Generator.$extension"
	GENERATOR_EXEC="${TEMPFILES_DIR}/${filename}__Generator"

	CHECKER="${DIR}/${filename}__Checker.$extension"
	CHECKER_EXEC="${TEMPFILES_DIR}/${filename}__Checker"

	INTERACTOR="${DIR}/${filename}__Interactor.$extension"
	INTERACTOR_EXEC="${TEMPFILES_DIR}/${filename}__Interactor"

	TESTCASE_FILE="${DIR}/${filename}__Testcase.txt"
	MAIN_FILE_OUTPUT="${DIR}/${filename}__Output_Main.txt"
	GOOD_FILE_OUTPUT="${DIR}/${filename}__Output_Good.txt"
	VERDICT_FILE="${DIR}/${filename}__Verdict.txt"
	COMBINED_FILE="${DIR}/${filename}__Combined.txt"
	FIFO_FILE="${DIR}/fifo"

	if [ ! -d $TEMPFILES_DIR ];
	then
		mkdir $TEMPFILES_DIR
	fi

	if g++ $MAIN_FILE -o $MAIN_FILE_EXEC; # Compiling the code to be tested
	then
		echo "Main Solution compiled successfully."
	else
		echo "Main Solution compilation failed."
		echo ""
		exit 1
	fi

	if [[ $TESTING_TYPE == "normal" ]]; then

		if g++ $GENERATOR -o $GENERATOR_EXEC; # Random testcase generator
		then
			echo "Generator compiled successfully."
		else
			echo "Generator compilation failed."
			exit 1
		fi

		if g++ $GOOD_FILE -o $GOOD_FILE_EXEC; # Bruteforce correct solution
		then
			echo "Good Solution compiled successfully."
			echo ""
		else
			echo "Good Solution compilation failed."
			echo ""
			exit 1
		fi

		VERDICT="\nAccepted"

		for((i = 0; i < $NO_OF_TESTCASES; i++)); do

			echo -e "Running Test Case #$i"

			if ! timeout 2s $GENERATOR_EXEC > $TESTCASE_FILE; then
				echo "Generator execution failed due to timeout or runtime errors."
				echo ""
				exit 1
			fi
			tc=$i
			if ! timeout 2s $GOOD_FILE_EXEC < $TESTCASE_FILE > $GOOD_FILE_OUTPUT; then
				echo "Good Solution execution failed due to timeout or runtime errors."
				echo ""
				exit 1
			fi
			if ! timeout 2s $MAIN_FILE_EXEC < $TESTCASE_FILE > $MAIN_FILE_OUTPUT; then
				echo "Main Solution execution failed due to timeout or runtime errors."
				echo ""
				exit 1
			fi
			
			if ! diff $GOOD_FILE_OUTPUT $MAIN_FILE_OUTPUT >/dev/null ; then
				VERDICT="\nTest Case: \n$(cat $TESTCASE_FILE) \n\nExpected: \n$(cat $GOOD_FILE_OUTPUT) \n\nFound: \n$(cat $MAIN_FILE_OUTPUT) \n\nWrong Answer"
				break
			fi
		done
		
		echo -e "${VERDICT}" | tee $VERDICT_FILE


	elif [[ $TESTING_TYPE == "custom" ]]; then

		if g++ $GENERATOR -o $GENERATOR_EXEC; # Random testcase generator
		then
			echo "Generator compiled successfully."
		else
			echo "Generator compilation failed."
			exit 1
		fi

		if g++ $CHECKER -o $CHECKER_EXEC;
		then
			echo "Checker compiled successfully."
			echo ""
		else
			echo "Checker compilation failed."
			echo ""
			exit 1
		fi

		VERDICT="\nAccepted"

		for((i = 0; i < $NO_OF_TESTCASES; i++)); do

			echo -e "Running Test Case #$i"

			if ! timeout 2s $GENERATOR_EXEC > $TESTCASE_FILE; then
				echo "Generator execution failed due to timeout or runtime errors."
				echo ""
				exit 1
			fi

			if ! timeout 2s $MAIN_FILE_EXEC < $TESTCASE_FILE > $MAIN_FILE_OUTPUT; then
				echo "Main Solution execution failed due to timeout or runtime errors."
				echo ""
				exit 1
			fi

			echo >> $TESTCASE_FILE
			cat $TESTCASE_FILE $MAIN_FILE_OUTPUT > $COMBINED_FILE

			if ! $CHECKER_EXEC < $COMBINED_FILE > $VERDICT_FILE; then
				VERDICT="\n\nTest Case: \n$(cat $TESTCASE_FILE) \n\nOutput: \n$(cat $MAIN_FILE_OUTPUT) \n\nWrong Answer \n\n$(cat $VERDICT_FILE)"
				break
			fi
		done

		echo -e "${VERDICT}" | tee $VERDICT_FILE

	elif [[ $TESTING_TYPE == "interactive" ]]; then

		if g++ $INTERACTOR -o $INTERACTOR_EXEC;
		then
			echo "Interactor compiled successfully."
			echo ""
		else
			echo "Interactor compilation failed."
			echo ""
			exit 1
		fi

		VERDICT="\nAccepted"

		for((i = 0; i < $NO_OF_TESTCASES; i++)); do

			echo -e "Running Test Case #$i"

			rm -rf $FIFO_FILE
			mkfifo $FIFO_FILE

			if ! timeout 2s $MAIN_FILE_EXEC < $FIFO_FILE | $INTERACTOR_EXEC > $FIFO_FILE 2> $TESTCASE_FILE; then
				echo "Exectution Failed: Wrong Solution or Timeout errors."
				echo ""
				VERDICT=""
				cat $TESTCASE_FILE
				break
			fi
		done

		echo -e "${VERDICT}" | tee $VERDICT_FILE

	fi


else
	echo ""
	echo "Usage:"
	echo "./stress-test <file.cpp> normal <no_of_testcases>"
	echo "./stress-test <file.cpp> custom <no_of_testcases>"
	echo "./stress-test <file.cpp> interactive <no_of_testcases>"
fi
echo
